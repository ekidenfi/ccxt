<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use ccxt\abstract\ekiden as Exchange;

class ekiden extends Exchange {

    public function strip_addr_suffix_upper(string $value): string {
        $up = strtoupper($value);
        $tag = '-0X';
        $idx = mb_strpos($up, $tag);
        if ($idx >= 0) {
            $hexPart = mb_substr($up, $idx . strlen($tag));
            if ($hexPart && strlen($hexPart) > 0) {
                $isHex = true;
                for ($j = 0; $j < count($hexPart); $j++) {
                    $ch = $hexPart[$j];
                    $isDigit = ($ch >= '0') && ($ch <= '9');
                    $isAF = ($ch >= 'A') && ($ch <= 'F');
                    if (!$isDigit && !$isAF) {
                        $isHex = false;
                        break;
                    }
                }
                if ($isHex) {
                    return mb_substr($value, 0, $idx - 0);
                }
            }
        }
        return $value;
    }

    public function normalize_symbol(string $symbol): string {
        $s = strtoupper($symbol);
        if (mb_strpos($s, '/') !== false) {
            $parts = explode('/', $s);
            $leftRaw = $parts[0];
            $rightRaw = $parts[1];
            $left = $this->strip_addr_suffix_upper($leftRaw);
            $right = $rightRaw;
            if ($right === 'NONE') {
                if (str_ends_with($left, '-PERP')) {
                    $left = mb_substr($left, 0, strlen($left) - 5 - 0);
                    $right = 'USDC';
                } elseif (mb_strpos($left, '-') !== false) {
                    $idx = mb_strpos($left, '-');
                    $base = mb_substr($left, 0, $idx - 0);
                    $quote = mb_substr($left, $idx + 1);
                    $left = $base;
                    $right = $quote;
                }
            }
            $s = $left . '/' . $right;
        } else {
            $s = $this->strip_addr_suffix_upper($s);
            if (str_ends_with($s, '-PERP')) {
                $s = mb_substr($s, 0, strlen($s) - 5 - 0) . '/USDC';
            }
            if ((mb_strpos($s, '/') === false) && (mb_strpos($s, '-') !== false)) {
                $idx = mb_strpos($s, '-');
                $s = mb_substr($s, 0, $idx - 0) . '/' . mb_substr($s, $idx + 1);
            }
        }
        return $s;
    }
    }

    public function intent_seed_hex(): string {
        // Same SEED used in ts-sdk composeHexPayload
        return 'e2ac4e5688d964270ad876d760c2ebb2d54fb26d93512c790049b6583730d06f';
    }

    public function serialize_string_hex(string $value): string {
        $bin = $this->encode($value);
        // Build ULEB128 $length manually using numberToLE for cross-language compatibility
        $length = $this->binary_length($bin);
        $v = $length;
        $ulebHex = '';
        while ($v >= 0x80) {
            $low7 = fmod($v, 128);
            $byteVal = $low7 + 0x80;
            $ulebHex .= bin2hex($this->number_to_le($byteVal, 1));
            $v = (int) floor($v / 0x80);
        }
        $ulebHex .= bin2hex($this->number_to_le($v, 1));
        $dataHex = bin2hex($bin);
        return $ulebHex . $dataHex;
    }

    public function encode_uleb128_length(float $len): string {
        $v = $len;
        $uleb = '';
        while ($v >= 0x80) {
            $low7 = fmod($v, 128);
            $byteVal = $low7 + 0x80;
            $uleb .= bin2hex($this->number_to_le($byteVal, 1));
            $v = (int) floor($v / 0x80);
        }
        $uleb .= bin2hex($this->number_to_le($v, 1));
        return $uleb;
    }

    public function serialize_action_payload_hex(array $payload): string {
        // Mirrors ts-sdk/src/utils/buildOrderPayload.ts
        $out = $this->serialize_string_hex($this->safe_string($payload, 'type'));
        if ($payload['type'] === 'leverage_assign') {
            $out .= bin2hex($this->number_to_le($this->safe_integer($payload, 'leverage'), 8));
            $out .= $this->serialize_string_hex($this->safe_string($payload, 'market_addr'));
        } elseif ($payload['type'] === 'order_cancel') {
            $cancels = $payload['cancels'] || array();
            // uleb128 length
            $lenHex = $this->encode_uleb128_length(strlen($cancels));
            $out .= $lenHex;
            for ($i = 0; $i < count($cancels); $i++) {
                $out .= $this->serialize_string_hex($this->safe_string($cancels[$i], 'sid'));
            }
        } elseif ($payload['type'] === 'order_create') {
            $orders = $payload['orders'] || array();
            // uleb128 length
            $lenHex = $this->encode_uleb128_length(strlen($orders));
            $out .= $lenHex;
            for ($i = 0; $i < count($orders); $i++) {
                $o = $orders[$i];
                $out .= $this->serialize_string_hex($this->safe_string($o, 'side'));
                $out .= bin2hex($this->number_to_le($this->safe_integer($o, 'size'), 8));
                $out .= bin2hex($this->number_to_le($this->safe_integer($o, 'price'), 8));
                $out .= bin2hex($this->number_to_le($this->safe_integer($o, 'leverage'), 8));
                $out .= $this->serialize_string_hex($this->safe_string($o, 'type'));
                $out .= $this->serialize_string_hex($this->safe_string($o, 'market_addr'));
            }
        } else {
            throw new NotSupported($this->id . ' unsupported $payload type => ' . $payload['type']);
        }
        return $out;
    }

    public function build_message_hex(string $payloadHex, float $nonce): string {
        return $this->intent_seed_hex() . $payloadHex . bin2hex($this->number_to_le($nonce, 8));
    }

    public function sign_message_hex(string $messageHex): string {
        $msgBin = $this->base16_to_binary($messageHex);
        $pkHex = str_starts_with($this->secret, '0x') ? mb_substr($this->secret, 2) : $this->secret;
        $secret = $this->base16_to_binary($pkHex);
        $sigB64 = $this->eddsa($msgBin, $secret, 'ed25519');
        $sigHex = bin2hex(base64_decode($sigB64));
        return '0x' . $sigHex;
    }

    public function build_signed_intent(array $payload, float $nonce): array {
        $payloadHex = $this->serialize_action_payload_hex($payload);
        $messageHex = $this->build_message_hex($payloadHex, $nonce);
        $signature = $this->sign_message_hex($messageHex);
        return array( 'payload' => $payload, 'nonce' => $nonce, 'signature' => $signature );
    }

    public function is_valid_signed_intent_params(array $params, ?string $expectedType = null): bool {
        $payload = $this->safe_value($params, 'payload');
        $payloadType = $this->safe_string($payload, 'type');
        $sig = $this->safe_string($params, 'signature');
        $hasNonce = (is_array($params) && array_key_exists('nonce', $params));
        $hasType = ($payloadType !== null);
        $typeOk = ($expectedType === null) ? true : ($payloadType === $expectedType);
        $sigOk = ($sig !== null) && (strlen($sig) > 2);
        return ($payload !== null) && $hasType && $typeOk && $sigOk && $hasNonce;
    }

    public function scale_order_fields(array $market, string $side, float $amount, ?float $price, string $type, float $leverage): array {
        $baseDecimals = $this->safe_integer($market['info'] || array(), 'base_decimals');
        $quoteDecimals = $this->safe_integer($market['info'] || array(), 'quote_decimals');
        $sizeInt = ($baseDecimals !== null && $amount !== null) ? $this->parse_to_int($amount * pow(10, $baseDecimals)) : null;
        $priceInt = ($quoteDecimals !== null && $price !== null) ? $this->parse_to_int($price * pow(10, $quoteDecimals)) : 0;
        return array(
            'market_addr' => $market['id'],
            'side' => $side,
            'size' => $sizeInt,
            'price' => $priceInt,
            'type' => $type,
            'leverage' => $leverage,
        );
    }

    public function parse_cancel_order_result(array $response, string $requestedId, ?array $market = null): array {
        // Attempt to locate the canceled $sid in $outputs; fall back to $requestedId
        $id = $requestedId;
        $output = $this->safe_value($response, 'output');
        $outputType = $this->safe_string($output, 'type');
        if ($output && $outputType === 'order_cancel') {
            $outputs = $this->safe_value($output, 'outputs', array());
            if (($outputs !== null) && (strlen($outputs) > 0)) {
                $first = $outputs[0];
                $sid = $this->safe_string($first, 'sid');
                if ($sid !== null) {
                    $id = $sid;
                }
            }
        }
        $ts = $this->safe_integer($response, 'timestamp');
        $timestamp = ($ts !== null) ? $this->parse_to_int($ts) : null;
        $datetime = $this->iso8601($timestamp);
        $symbolOut = $market ? $market['symbol'] : null;
        return $this->safe_order(array(
            'id' => $id,
            'clientOrderId' => null,
            'timestamp' => $timestamp,
            'datetime' => $datetime,
            'lastTradeTimestamp' => null,
            'status' => 'canceled',
            'symbol' => $symbolOut,
            'type' => null,
            'timeInForce' => null,
            'postOnly' => null,
            'side' => null,
            'price' => null,
            'stopPrice' => null,
            'triggerPrice' => null,
            'takeProfitPrice' => null,
            'stopLossPrice' => null,
            'cost' => null,
            'amount' => null,
            'filled' => null,
            'remaining' => null,
            'average' => null,
            'fee' => null,
            'trades' => array(),
            'reduceOnly' => null,
            'info' => $response,
        ), $market);
    }

    public function parse_create_order_result(array $response, array $payload, array $market, float $amount, ?float $price, string $side, string $type): array {
        // Extract order sid from $response->output or $response->sid
        $id = null;
        $output = $this->safe_value($response, 'output');
        $outputType = $this->safe_string($output, 'type');
        if ($output && $outputType === 'order_create') {
            $outputs = $this->safe_value($output, 'outputs', array());
            if (($outputs !== null) && (strlen($outputs) > 0)) {
                $id = $this->safe_string($outputs[0], 'sid');
            }
        }
        if ($id === null) {
            $id = $this->safe_string($response, 'sid');
        }
        $ts = $this->safe_integer($response, 'timestamp');
        $timestamp = ($ts !== null) ? $this->parse_to_int($ts) : null;
        $datetime = $this->iso8601($timestamp);
        $symbolOut = $market ? $market['symbol'] : null;
        return $this->safe_order(array(
            'id' => $id,
            'clientOrderId' => null,
            'timestamp' => $timestamp,
            'datetime' => $datetime,
            'lastTradeTimestamp' => null,
            'status' => 'open',
            'symbol' => $symbolOut,
            'type' => $type,
            'timeInForce' => null,
            'postOnly' => null,
            'side' => $side,
            'price' => $price,
            'stopPrice' => null,
            'triggerPrice' => null,
            'takeProfitPrice' => null,
            'stopLossPrice' => null,
            'cost' => null,
            'amount' => $amount,
            'filled' => 0,
            'remaining' => $amount,
            'average' => null,
            'fee' => null,
            'trades' => array(),
            'reduceOnly' => null,
            'info' => $response,
        ), $market);
    }

    public function describe(): mixed {
        return $this->deep_extend(parent::describe(), array(
            'id' => 'ekiden',
            'name' => 'Ekiden',
            'countries' => [ ],
            'rateLimit' => 50,
            'version' => 'v1',
            'certified' => false,
            'pro' => false,
            'dex' => true,
            'has' => array(
                'CORS' => null,
                'spot' => true,
                'margin' => false,
                'swap' => true,
                'future' => true,
                'option' => false,
                'cancelAllOrders' => false,
                'cancelOrder' => true,
                'createOrder' => true,
                'fetchBalance' => true,
                'fetchClosedOrders' => true,
                'fetchMarkets' => true,
                'fetchMyTrades' => false,
                'fetchOHLCV' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchPositions' => false,
                'fetchTicker' => true,
                'fetchTickers' => true,
                'fetchTrades' => true,
                'sandbox' => true,
            ),
            'timeframes' => array(
                '1m' => '1m',
                '5m' => '5m',
                '15m' => '15m',
                '1h' => '1h',
                '4h' => '4h',
                '1d' => '1d',
            ),
            'hostname' => 'ekiden.fi',
            'urls' => array(
                'logo' => 'https://raw.githubusercontent.com/ekidenfi/ekiden-docs/refs/heads/main/logo/light.svg',
                'api' => array(
                    'public' => 'https://api.staging.ekiden.fi',
                    'private' => 'https://api.staging.ekiden.fi',
                ),
                'test' => array(
                    'public' => 'https://api.staging.ekiden.fi',
                    'private' => 'https://api.staging.ekiden.fi',
                ),
                'www' => 'https://ekiden.fi',
                'doc' => array(
                    'https://docs.ekiden.fi',
                ),
            ),
            'precisionMode' => DECIMAL_PLACES,
            'requiredCredentials' => array(
                'apiKey' => true,
                'secret' => true,
            ),
            'api' => array(
                'v1' => array(
                    'public' => array(
                        'get' => array(
                            'market/candles' => 1,
                            'market/candles/stats/{market_addr}' => 1,
                            'market/market_info' => 1,
                            'market/fills' => 1,
                            'market/orders' => 1,
                        ),
                    ),
                    'private' => array(
                        'get' => array(
                            'user/orders' => 1,
                        ),
                        'post' => array(
                            'user/intent' => 1,
                            'user/intent/commit' => 1,
                        ),
                    ),
                ),
            ),
            'fees' => array(
                'trading' => array(
                    'tierBased' => false,
                    'percentage' => true,
                    'taker' => $this->parse_number('0.001'),
                    'maker' => $this->parse_number('0.001'),
                ),
            ),
            'options' => array(
                'sandboxMode' => true,
            ),
            'commonCurrencies' => array(
            ),
            'spot' => array(
                'extends' => 'default',
            ),
            'future' => array(
                'linear' => array(
                    'extends' => 'forPerps',
                ),
                'inverse' => array(
                    'extends' => 'forPerps',
                ),
            ),
        ));
    }

    public function sign($path, $api = [], $method = 'GET', $params = array (), $headers = null, $body = null) {
        $version = $api[0];
        $scope = $api[1]; // 'public' | 'private'
        $fullPath = '/api/' . $version . '/' . $this->implode_params($path, $params);
        $url = $this->urls['api'][$scope] . $fullPath;
        $params = $this->omit($params, $this->extract_params($path));
        if ($method === 'GET') {
            $query = $this->urlencode($params);
            if (strlen($query)) {
                $url .= '?' . $query;
            }
        } else {
            if ($params) {
                $body = $this->json($params);
            }
        }
        $headers = array( 'Content-Type' => 'application/json' );
        if ($scope === 'private' && $this->apiKey) {
            $headers['Authorization'] = 'Bearer ' . $this->apiKey;
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function fetch_markets($params = array ()): array {
        $response = $this->v1PublicGetMarketMarketInfo ($params);
        // $response => array of MarketResponse
        $result => Marketarray() = array();
        for ($i = 0; $i < count($response); $i++) {
            $market = $response[$i];
            $id = $this->safe_string($market, 'addr');
            $rawSymbol = $this->safe_string($market, 'symbol');
            $symbol = ($rawSymbol !== null) ? $this->normalize_symbol($rawSymbol) : null;
            $baseId = $this->safe_string($market, 'base_addr');
            $quoteId = $this->safe_string($market, 'quote_addr');
            $baseDecimals = $this->safe_integer($market, 'base_decimals');
            $quoteDecimals = $this->safe_integer($market, 'quote_decimals');
            $linear = true;
            $type = 'swap';
            $settle = null;
            $settleId = null;
            $active = true;
            $precision = array( 'amount' => $baseDecimals, 'price' => $quoteDecimals );
            $result[] = array(
                'id' => $id,
                'symbol' => $symbol,
                'base' => $baseId,
                'quote' => $quoteId,
                'baseId' => $baseId,
                'quoteId' => $quoteId,
                'type' => $type,
                'spot' => false,
                'margin' => false,
                'swap' => true,
                'future' => false,
                'option' => false,
                'contract' => true,
                'linear' => $linear,
                'inverse' => !$linear,
                'settle' => $settle,
                'settleId' => $settleId,
                'active' => $active,
                'precision' => $precision,
                'limits' => array(),
                'info' => $market,
            );
        }
        return $result;
    }

    public function parse_trade(array $trade, ?array $market = null): array {
        $id = $this->safe_string($trade, 'sid');
        $side = $this->safe_string_lower($trade, 'side');
        $ts = $this->safe_integer($trade, 'timestamp');
        $timestamp = ($ts !== null) ? $this->parse_to_int($ts) : null;
        $marketId = $this->safe_string($trade, 'market_addr');
        $market = $market || $this->safe_market($marketId);
        $baseDecimals = $this->safe_integer($market['info'] || array(), 'base_decimals');
        $quoteDecimals = $this->safe_integer($market['info'] || array(), 'quote_decimals');
        $sizeInt = $this->safe_integer($trade, 'size');
        $priceInt = $this->safe_integer($trade, 'price');
        $amount = null;
        $price = null;
        $datetime = ($timestamp !== null) ? $this->iso8601($timestamp) : null;
        if ($baseDecimals !== null && $sizeInt !== null) {
            $amount = $sizeInt / pow(10, $baseDecimals);
        }
        if ($amount !== null) {
            $amount = abs($amount);
        }
        if ($quoteDecimals !== null && $priceInt !== null) {
            $price = $priceInt / pow(10, $quoteDecimals);
        }
        $cost = ($amount !== null && $price !== null) ? ($amount * $price) : null;
        return $this->safe_trade(array(
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $datetime,
            'symbol' => $market ? $market['symbol'] : null,
            'side' => $side,
            'order' => null,
            'type' => null,
            'takerOrMaker' => null,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'fee' => null,
            'info' => $trade,
        ), $market);
    }

    public function fetch_trades(string $symbol, ?int $since = null, ?int $limit = null, $params = array ()): array {
        $this->load_markets();
        $market = $this->market($this->normalize_symbol($symbol));
        $request = array(
            'market_addr' => $market['id'],
        );
        if ($limit !== null) {
            $request['per_page'] = $limit;
        }
        $response = $this->v1PublicGetMarketFills ($this->extend($request, $params));
        // $response => array of FillResponse
        $trades = $this->parse_trades($response, $market, $since, $limit);
        return $trades;
    }

    public function fetch_order_book(string $symbol, ?int $limit = null, $params = array ()): array {
        $this->load_markets();
        $market = $this->market($this->normalize_symbol($symbol));
        $request = array( 'market_addr' => $market['id'] );
        if ($limit !== null) {
            $request['per_page'] = $limit;
        }
        $response = $this->v1PublicGetMarketOrders ($this->extend($request, $params));
        // $response => array of OrderResponse with side/price/size ints
        $baseDecimals = $this->safe_integer($market['info'] || array(), 'base_decimals');
        $quoteDecimals = $this->safe_integer($market['info'] || array(), 'quote_decimals');
        $bidsMap = array();
        $asksMap = array();
        for ($i = 0; $i < count($response); $i++) {
            $o = $response[$i];
            $side = $this->safe_string_lower($o, 'side');
            $priceInt = $this->safe_integer($o, 'price');
            $sizeInt = $this->safe_integer($o, 'size');
            if ($priceInt === null || $sizeInt === null) {
                continue;
            }
            $key = (string) $priceInt;
            $sizeFloat = ($baseDecimals !== null) ? (abs($sizeInt) / pow(10, $baseDecimals)) : null;
            if ($sizeFloat === null) {
                continue;
            }
            if ($side === 'buy') {
                $prev = $this->safe_number($bidsMap, $key, 0);
                $bidsMap[$key] = $this->sum($prev, $sizeFloat);
            } elseif ($side === 'sell') {
                $prev = $this->safe_number($asksMap, $key, 0);
                $asksMap[$key] = $this->sum($prev, $sizeFloat);
            }
        }
        $bids = array();
        $asks = array();
        $bidKeys = is_array($bidsMap) ? array_keys($bidsMap) : array();
        for ($i = 0; $i < count($bidKeys); $i++) {
            $k = $bidKeys[$i];
            $pInt = $this->parse_to_numeric($k);
            $pFloat = ($quoteDecimals !== null) ? ($pInt / pow(10, $quoteDecimals)) : $pInt;
            $bids[] = [ $pFloat, $bidsMap[$k] ];
        }
        $askKeys = is_array($asksMap) ? array_keys($asksMap) : array();
        for ($i = 0; $i < count($askKeys); $i++) {
            $k = $askKeys[$i];
            $pInt = $this->parse_to_numeric($k);
            $pFloat = ($quoteDecimals !== null) ? ($pInt / pow(10, $quoteDecimals)) : $pInt;
            $asks[] = [ $pFloat, $asksMap[$k] ];
        }
        $orderbook = array( 'bids' => $bids, 'asks' => $asks );
        $result = $this->parse_order_book($orderbook, $symbol);
        if ($limit !== null) {
            $result['bids'] = mb_substr($result['bids'], 0, $limit - 0);
            $result['asks'] = mb_substr($result['asks'], 0, $limit - 0);
        }
        return $result;
    }

    public function fetch_balance($params = array ()): array {
        // Derive balances from user portfolio endpoint; assumes a single quote asset vault (e.g., USDC)
        $this->check_required_credentials();
        $response = $this->request('user/portfolio', array( 'v1', 'private' ), 'GET', $params);
        // $response => PortfolioResponse array( vault_balances => array( array( asset_addr, balance ) ), $summary => array( total_margin_used ) )
        $vaults = $this->safe_value($response, 'vault_balances', array());
        $summary = $this->safe_value($response, 'summary', array());
        // Try to detect $decimals from markets using the first vault asset
        $this->load_markets();
        $decimals = null;
        $code => string = 'USDC';
        if (strlen($vaults) > 0) {
            $assetAddr = $this->safe_string($vaults[0], 'asset_addr');
            // find any market where $quoteId == $assetAddr
            $marketIds = is_array($this->markets_by_id || array()) ? array_keys($this->markets_by_id || array()) : array();
            for ($i = 0; $i < count($marketIds); $i++) {
                $m = $this->markets_by_id[$marketIds[$i]];
                // markets_by_id can map an id to an array of market dicts; use the first
                if (gettype($m) === 'array' && array_keys($m) === array_keys(array_keys($m)) && strlen($m) > 0) {
                    $m = $m[0];
                }
                $info = $m ? ($m['info'] || array()) : array();
                $quoteId = $this->safe_string($info, 'quote_addr');
                if ($quoteId === $assetAddr) {
                    $decimals = $this->safe_integer($info, 'quote_decimals');
                    // Best-effort $code detection => try to parse from symbol suffix (e.g., BTC/USDC)
                    $sym = $this->safe_string($m, 'symbol');
                    if ($sym) {
                        $parts = explode('/', $sym);
                        if (strlen($parts) > 1) {
                            $code = explode(':', $parts[1])[0];
                        }
                    }
                    break;
                }
            }
        }
        $totalRaw = $this->safe_integer($vaults[0] || array(), 'balance');
        $usedRaw = $this->safe_integer($summary, 'total_margin_used');
        $total = null;
        if ($totalRaw !== null) {
            $total = ($decimals !== null) ? ($totalRaw / pow(10, $decimals)) : $totalRaw;
        }
        $used = 0;
        if ($usedRaw !== null) {
            $used = ($decimals !== null) ? ($usedRaw / pow(10, $decimals)) : $usedRaw;
        }
        $free = ($total !== null && $used !== null) ? ($total - $used) : null;
        $result = array( 'info' => $response );
        $result[$code] = array(
            'free' => $free,
            'used' => $used,
            'total' => $total,
        );
        return $this->safe_balance($result);
    }

    public function parse_ohlcv($ohlcv, ?array $market = null): array {
        $ts = $this->safe_integer($ohlcv, 'timestamp');
        $timestamp = ($ts !== null) ? ($ts * 1000) : null;
        $open = $this->safe_number($ohlcv, 'open');
        $high = $this->safe_number($ohlcv, 'high');
        $low = $this->safe_number($ohlcv, 'low');
        $close = $this->safe_number($ohlcv, 'close');
        $volume = $this->safe_number($ohlcv, 'volume');
        return array( $timestamp, $open, $high, $low, $close, $volume );
    }

    public function fetch_ohlcv(string $symbol, $timeframe = '1h', ?int $since = null, ?int $limit = null, $params = array ()): array {
        $this->load_markets();
        $market = $this->market($this->normalize_symbol($symbol));
        $request = array(
            'market_addr' => $market['id'],
            'timeframe' => $timeframe,
        );
        if ($since !== null) {
            $request['start_time'] = $this->parse_to_int($since / 1000);
        }
        if ($limit !== null) {
            $request['per_page'] = $limit;
        }
        $response = $this->v1PublicGetMarketCandles ($this->extend($request, $params));
        // $response is array of array( timestamp, open, high, low, close, volume, count )
        return $this->parse_ohlcvs($response, $market, $timeframe, $since, $limit);
    }

    public function fetch_ticker(string $symbol, $params = array ()): array {
        $this->load_markets();
        $market = $this->market($this->normalize_symbol($symbol));
        $response = $this->v1PublicGetMarketCandlesStatsMarketAddr ($this->extend(array( 'market_addr' => $market['id'] ), $params));
        // MarketStatsResponse => current_price, price_24h_ago, price_change_24h, high_24h, low_24h, volume_24h (quote volume), trades_24h
        $last = $this->safe_number($response, 'current_price');
        $high = $this->safe_number($response, 'high_24h');
        $low = $this->safe_number($response, 'low_24h');
        $percentage = $this->safe_number($response, 'price_change_24h');
        $rawQuoteVolume = $this->safe_number($response, 'volume_24h');
        $quoteVolume = 0;
        if (($rawQuoteVolume !== null) && ($rawQuoteVolume > 0)) {
            $quoteVolume = $rawQuoteVolume;
        }
        $baseVolume = 0;
        if (($quoteVolume > 0) && ($last !== null) && ($last > 0)) {
            $baseVolume = $quoteVolume / $last;
        }
        return $this->safe_ticker(array(
            'symbol' => $market['symbol'],
            'timestamp' => null,
            'datetime' => null,
            'high' => $high,
            'low' => $low,
            'bid' => null,
            'bidVolume' => null,
            'ask' => null,
            'askVolume' => null,
            'vwap' => null,
            'open' => $this->safe_number($response, 'price_24h_ago'),
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => $percentage,
            'average' => null,
            'baseVolume' => $baseVolume,
            'quoteVolume' => $quoteVolume,
            'info' => $response,
        ), $market);
    }

    public function fetch_tickers(?array $symbols = null, $params = array ()): array {
        /**
         * fetches price tickers for multiple markets, statistical information calculated over the past 24 hours for each $market
         * @param {string[]|null} $symbols unified $symbols of the markets to fetch the $ticker for, all $market tickers are returned if not assigned
         * @param {array} [$params] extra parameters specific to the exchange API endpoint
         * @return {array} a dictionary of tickers indexed by $market $symbol
         */
        $this->load_markets();
        $symbols = $this->market_symbols($symbols);
        $symbolsArray = $symbols;
        if ($symbolsArray === null) {
            $symbolsArray = $this->symbols;
        }
        $result = array();
        for ($i = 0; $i < count($symbolsArray); $i++) {
            $symbol = $symbolsArray[$i];
            $market = $this->market($this->normalize_symbol($symbol));
            $response = $this->v1PublicGetMarketCandlesStatsMarketAddr ($this->extend(array( 'market_addr' => $market['id'] ), $params));
            $last = $this->safe_number($response, 'current_price');
            $high = $this->safe_number($response, 'high_24h');
            $low = $this->safe_number($response, 'low_24h');
            $percentage = $this->safe_number($response, 'price_change_24h');
            $rawQuoteVolume = $this->safe_number($response, 'volume_24h');
            $quoteVolume = 0;
            if (($rawQuoteVolume !== null) && ($rawQuoteVolume > 0)) {
                $quoteVolume = $rawQuoteVolume;
            }
            $baseVolume = 0;
            if (($quoteVolume > 0) && ($last !== null) && ($last > 0)) {
                $baseVolume = $quoteVolume / $last;
            }
            $ticker = $this->safe_ticker(array(
                'symbol' => $market['symbol'],
                'timestamp' => null,
                'datetime' => null,
                'high' => $high,
                'low' => $low,
                'bid' => null,
                'bidVolume' => null,
                'ask' => null,
                'askVolume' => null,
                'vwap' => null,
                'open' => $this->safe_number($response, 'price_24h_ago'),
                'close' => $last,
                'last' => $last,
                'previousClose' => null,
                'change' => null,
                'percentage' => $percentage,
                'average' => null,
                'baseVolume' => $baseVolume,
                'quoteVolume' => $quoteVolume,
                'info' => $response,
            ), $market);
            $result[$market['symbol']] = $ticker;
        }
        return $result;
    }

    public function parse_order(array $order, ?array $market = null): array {
        $id = $this->safe_string($order, 'sid');
        $statusRaw = $this->safe_string($order, 'status');
        $side = $this->safe_string_lower($order, 'side');
        $type = $this->safe_string_lower($order, 'type');
        $ts = $this->safe_integer($order, 'timestamp');
        $timestamp = ($ts !== null) ? $this->parse_to_int($ts) : null;
        $marketId = $this->safe_string($order, 'market_addr');
        $market = $market || $this->safe_market($marketId);
        $baseDecimals = $this->safe_integer($market['info'] || array(), 'base_decimals');
        $quoteDecimals = $this->safe_integer($market['info'] || array(), 'quote_decimals');
        $size = $this->safe_number($order, 'size');
        $priceInt = $this->safe_integer($order, 'price');
        $amount = $size;
        $price = null;
        if ($baseDecimals !== null && $size !== null) {
            $amount = $size / pow(10, $baseDecimals);
        }
        if ($amount !== null) {
            $amount = abs($amount);
        }
        if ($quoteDecimals !== null && $priceInt !== null) {
            $price = $priceInt / pow(10, $quoteDecimals);
        }
        $status = null;
        // map to ccxt statuses
        if ($statusRaw === 'placed' || $statusRaw === 'created' || $statusRaw === 'partial_filled') {
            $status = 'open';
        } elseif ($statusRaw === 'filled') {
            $status = 'closed';
        } elseif ($statusRaw === 'cancelled' || $statusRaw === 'rejected') {
            $status = 'canceled';
        }
        return $this->safe_order(array(
            'id' => $id,
            'clientOrderId' => null,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601($timestamp),
            'lastTradeTimestamp' => null,
            'status' => $status,
            'symbol' => $market ? $market['symbol'] : null,
            'type' => $type,
            'timeInForce' => null,
            'postOnly' => null,
            'side' => $side,
            'price' => $price,
            'stopPrice' => null,
            'triggerPrice' => null,
            'cost' => null,
            'amount' => $amount,
            'filled' => null,
            'remaining' => null,
            'fee' => null,
            'trades' => null,
            'info' => $order,
        ), $market);
    }

    public function fetch_open_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        $this->load_markets();
        $this->check_required_credentials(false);
        $market = ($symbol !== null) ? $this->market($this->normalize_symbol($symbol)) : null;
        $request = array();
        if ($market) {
            $request['market_addr'] = $market['id'];
        }
        if ($limit !== null) {
            $request['per_page'] = $limit;
        }
        $response = $this->v1PrivateGetUserOrders ($this->extend($request, $params));
        $parsed = $this->parse_orders($response, $market);
        return $this->filter_by_array($parsed, 'status', array( 'open' ), false);
    }

    public function fetch_closed_orders(?string $symbol = null, ?int $since = null, ?int $limit = null, $params = array ()): array {
        $this->load_markets();
        $this->check_required_credentials(false);
        $market = ($symbol !== null) ? $this->market($this->normalize_symbol($symbol)) : null;
        $request = array();
        if ($market) {
            $request['market_addr'] = $market['id'];
        }
        if ($limit !== null) {
            $request['per_page'] = $limit;
        }
        $response = $this->v1PrivateGetUserOrders ($this->extend($request, $params));
        $parsed = $this->parse_orders($response, $market);
        return $this->filter_by_array($parsed, 'status', array( 'closed', 'canceled' ), false);
    }

    public function fetch_order(string $id, ?string $symbol = null, $params = array ()): array {
        $this->load_markets();
        $this->check_required_credentials(false);
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOrder() requires a $symbol to be specified');
        }
        $market = $this->market($this->normalize_symbol($symbol));
        $request = array( 'market_addr' => $market['id'], 'per_page' => 50 );
        $response = $this->v1PrivateGetUserOrders ($this->extend($request, $params));
        for ($i = 0; $i < count($response); $i++) {
            $item = $response[$i];
            if ($this->safe_string($item, 'sid') === $id) {
                return $this->parse_order($item, $market);
            }
        }
        throw new OrderNotFound($this->id . ' fetchOrder() could not find order $id ' . $id);
    }

    public function create_order(string $symbol, string $type, string $side, float $amount, ?float $price = null, $params = array ()): array {
        // Ekiden requires signed intents over /api/v1/user/intent (Ed25519, Aptos-style BCS $payload . $nonce . seed)
        $this->load_markets();
        $this->check_required_credentials(false);
        $market = $this->market($this->normalize_symbol($symbol));
        $hasPayload = $this->is_valid_signed_intent_params($params, 'order_create');
        $request = array();
        if ($hasPayload) {
            $commitProvided = $this->safe_bool($params, 'commit', false);
            $request = $this->omit($params, array( 'commit' ));
            $responseProvided = null;
            if ($commitProvided) {
                $responseProvided = $this->v1PrivatePostUserIntentCommit ($request);
            } else {
                $responseProvided = $this->v1PrivatePostUserIntent ($request);
            }
            return $this->safe_order(array( 'id' => null, 'symbol' => $market['symbol'], 'info' => $responseProvided ));
        }
        if (!$this->secret) {
            throw new NotSupported($this->id . ' createOrder() requires either $params array( $payload, signature, $nonce ) or exchange.secret to sign the intent');
        }
        $leverage = $this->safe_integer($params, 'leverage', 1);
        $commitFlag = $this->safe_bool($params, 'commit', true);
        $order = $this->scale_order_fields($market, $side, $amount, $price, $type, $leverage);
        $payload = array( 'type' => 'order_create', 'orders' => array( $order ) );
        $nonce = (is_array($params) && array_key_exists('nonce', $params)) ? $this->safe_integer($params, 'nonce') : $this->milliseconds();
        $request = $this->build_signed_intent($payload, $nonce);
        $responseSigned = null;
        if ($commitFlag) {
            $responseSigned = $this->v1PrivatePostUserIntentCommit ($request);
        } else {
            $responseSigned = $this->v1PrivatePostUserIntent ($request);
        }
        // If committed, try to resolve the final $order from user/orders by $seq
        if ($commitFlag) {
            $seq = $this->safe_integer($responseSigned, 'seq');
            if ($seq !== null) {
                try {
                    $list = $this->v1PrivateGetUserOrders (array( 'market_addr' => $market['id'], 'per_page' => 50 ));
                    for ($i = 0; $i < count($list); $i++) {
                        $it = $list[$i];
                        if ($this->safe_integer($it, 'seq') === $seq) {
                            return $this->parse_order($it, $market);
                        }
                    }
                } catch (Exception $e) {
                    // ignore and fallback below
                    // eslint-disable-next-line no-unused-vars
                    $_ = $e; // no-op to satisfy transpilers
                }
            }
        }
        return $this->parse_create_order_result($responseSigned, $payload, $market, $amount, $price, $side, $type);
    }

    public function cancel_order(string $id, ?string $symbol = null, $params = array ()): array {
        $this->load_markets();
        $this->check_required_credentials(false);
        $market = ($symbol !== null) ? $this->market($this->normalize_symbol($symbol)) : null;
        $hasPayload = $this->is_valid_signed_intent_params($params, 'order_cancel');
        $request = array();
        if ($hasPayload) {
            $commitProvided = $this->safe_bool($params, 'commit', false);
            $request = $this->omit($params, array( 'commit' ));
            $responseProvided = null;
            if ($commitProvided) {
                $responseProvided = $this->v1PrivatePostUserIntentCommit ($request);
            } else {
                $responseProvided = $this->v1PrivatePostUserIntent ($request);
            }
            return $this->parse_cancel_order_result($responseProvided, $id, $market);
        }
        if (!$this->secret) {
            throw new NotSupported($this->id . ' cancelOrder() requires either $params array( $payload, signature, $nonce ) or exchange.secret to sign the intent');
        }
        $commitFlag = $this->safe_bool($params, 'commit', true);
        // Build cancel $payload for a single sid ($id)
        $payload = array( 'type' => 'order_cancel', 'cancels' => array( array( 'sid' => $id ) ) );
        $nonce = (is_array($params) && array_key_exists('nonce', $params)) ? $this->safe_integer($params, 'nonce') : $this->milliseconds();
        $request = $this->build_signed_intent($payload, $nonce);
        $responseSigned2 = null;
        if ($commitFlag) {
            $responseSigned2 = $this->v1PrivatePostUserIntentCommit ($request);
        } else {
            $responseSigned2 = $this->v1PrivatePostUserIntent ($request);
        }
        return $this->parse_cancel_order_result($responseSigned2, $id, $market);
    }
}
